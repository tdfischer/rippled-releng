#!/bin/bash

### BEGIN INIT INFO
# Provides:          ripple
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the ripple network node
# Description:       starts rippled using start-stop-daemon
### END INIT INFO

# set -e

NAME=rippled
USER="rippled"
GROUP="rippled"
PIDFILE=/var/run/$NAME.pid
DAEMON=/usr/bin/rippled
DAEMON_OPTS="--conf /etc/rippled/rippled.cfg"
NET_OPTS="--net $DAEMON_OPTS"
LOGDIR="/var/log/rippled"
TMPDIR="/data/rippled/ephemeral"
STOP_LOOPS=30

ulimit -c unlimited

export PATH="${PATH:+$PATH:}/usr/sbin:/sbin"

# Read configuration variable file if one exists.  Note that this can
# potentially change the values of variables defined earlier in this script.
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Test to see if rippled is running.  Returns the exit status of ps if the
# pidfile exists, a static '1' if it doesn't.
is_running() {
	if [[ -e $PIDFILE ]]; then
		PID=$(<$PIDFILE)
		PIDLIST="$PID $(ps --no-headers -o pid --ppid=$PID | xargs echo)"
		ps $PIDLIST >/dev/null 2>&1
		return $?
	else
		return 1
	fi
}

# Stop rippled.
stop() {
	echo "Stopping daemon: "$NAME

        # See if rippled is actually running.
	PID=$(<$PIDFILE)
	PIDLIST="$PID $(ps --no-headers -o pid --ppid=$PID 2>/dev/null | xargs echo)"
	ps $PIDLIST >/dev/null 2>&1
	ret=$?
	if [[ $ret -ne 0 ]]; then
                # Delete a stale pidfile.
		rm -f $PIDFILE
		exit 0
	fi		

        # Ask rippled nicely to stop itself.
	$DAEMON $DAEMON_OPTS stop

        # Wait for rippled to clean up after itself and shut down.
	loop=1
	while [[ $loop -le ${STOP_LOOPS:-0} ]]; do
		ps $PIDLIST >/dev/null 2>&1 || break 1
		((loop++))
		echo -n "."
		sleep 1
	done
	echo

        # Verify that rippled did, in fact, shut itself down.
	ps $PIDLIST >/dev/null 2>&1
	ret=$?
	if [[ $ret -eq 0 ]]; then

                # rippled didn't shut itself down.  Kill it.
		echo "Failed to die. Killing aggressively."
		pkill -9 -f "$NAME $NET_OPTS"
		sleep 3
		ps $PIDLIST >/dev/null 2>&1
		ret=$?
		if [[ $ret -eq 0 ]]; then
                        # Uh-oh.
			echo "Could not kill. Exiting."
			exit 2
		fi 
	fi

        # Delete the pidfile.
	rm -f $PIDFILE
	echo "."
}

# Start rippled.
start() {
	if is_running; then
		echo "Cannot start daemon because it is already running"
		exit 2
	fi
	echo "Starting daemon: "$NAME

        # Clean out the ephemeral datastore if it exists.
        if [ -d $TMPDIR ]; then
            echo "Clearing out $TMPDIR"
	    rm -f $TMPDIR/*
        else
            echo "$TMPDIR not found, so not clearing"
        fi

        # If a new version of rippled has been installed from a .deb package,
        # back up the older version in case it's needed later.
	if [[ -e ${DAEMON}.dpkg-old ]]; then
		echo "Found an old binary from a previous installation. Moving it to ${DAEMON}.prev"
		[[ -e ${DAEMON}.prev ]] && rm -f ${DAEMON}.prev
		mv ${DAEMON}.dpkg-old ${DAEMON}.prev
	fi

        # Actually start rippled.
	start-stop-daemon --start --quiet --background -m --pidfile $PIDFILE \
            --exec $DAEMON --chuid $USER --group $GROUP -- $NET_OPTS \
            &>$LOGDIR/rippled.log
	echo "."
}

case "$1" in
    start)
        start
        ;;

    stop)
        stop
        ;;

    restart)
	stop
	start
        ;;

    status)
        echo "Status of $NAME:"
        echo "PID of $NAME: "
        if [ -f "$PIDFILE" ]; then
                cat $PIDFILE
                $DAEMON $DAEMON_OPTS server_info
        else
                echo "$NAME not running."
        fi
        echo "."
    ;;

    fetch)
        echo "$NAME ledger fetching info:"
        $DAEMON $DAEMON_OPTS fetch_info
        echo "."
        ;;

    uptime)
        echo "$NAME uptime:"
        $DAEMON $DAEMON_OPTS get_counts
        echo "."
        ;;

    startconfig)
        echo "$NAME is being started with the following command line:"
        echo "$DAEMON $NET_OPTS"
        echo "."
        ;;

    command)
        # Truncate the script's argument vector by one position to get rid of
        # this entry.
        shift

        # Pass the remainder of the argument vector to rippled.
        $DAEMON $DAEMON_OPTS "$@"
        echo "."
        ;;

    test)
        $DAEMON $DAEMON_OPTS ping
        echo "."
        ;;

    # Undocumented command that deletes rippled's databases.
    clean)
        # Extract the location of the config file.
        CONFIG=`echo $DAEMON_OPTS | awk '{print $2}'`

        # Stop rippled.
        stop

        # Extract the location of the node_db.
        NODE_DB=`grep '^path' $CONFIG | awk -F= '{print $2}'`

        # Extract the location of the peer and path databases.
        PEER_DB=`grep -A1 'database_path' $CONFIG | tail -1`

        # Delete the node database.
        rm -f $NODE_DB/* 2>/dev/null

        # Delete the peering and path databases.
        rm -f $PEER_DB/* 2>/dev/null

        # Start rippled.
        start
        ;;

    *)
        echo "Usage: $0 {start|stop|restart|status|fetch|uptime|startconfig|"
        echo "           command|test}"
        exit 1
esac

exit 0
